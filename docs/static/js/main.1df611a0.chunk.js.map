{"version":3,"sources":["components/Header.js","components/Footer.js","components/Cell.js","components/Row.js","components/DataTable.js","components/SearchBox.js","components/SortBox.js","containers/App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","Footer","Cell","this","props","classProp","key","rowNumber","id","data","Row","rowData","cityGeoNameId","city","country","continent","date","time","temp","weather","humidity","windspeed","DataTable","geoData","cityRows","Object","entries","map","i","value","SearchBox","searchField","searchChange","role","htmlFor","type","name","placeholder","maxLength","onChange","SortBox","sortField","sortChange","App","onSearchChange","event","setState","searchfield","target","onSortChange","sortfield","state","cities","a","cityWhere","encodeURIComponent","JSON","stringify","isCapital","fetch","headers","cityResponse","json","cityResults","cityData","results","cleanCityData","cityId","countryGeoNameId","objectId","latitude","location","longitude","timezone","undefined","weatherResponse","weatherData","timezoneResponse","timezoneData","timezoneId","slice","main","wind","speed","sortedCities","arr","sortProperty","sort","b","sortArray","filter","toLowerCase","includes","toString","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1df611a0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <header className=\"app-header\">\r\n                <h1>The Weather in World Capitals</h1>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import React from \"react\";\r\n\r\nclass Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <footer className=\"app-footer\">\r\n                <p>Made by Andrew Braun</p>\r\n            </footer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer","import React from \"react\";\r\n\r\nclass Cell extends React.Component {\r\n  render() {\r\n    return (\r\n      <td\r\n        className={`${this.props.classProp}`}\r\n        key={`${this.props.classProp}-${this.props.rowNumber}`}\r\n        id={`${this.props.classProp}-${this.props.rowNumber}`}\r\n      >\r\n        {this.props.data}\r\n      </td>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cell;\r\n","import React from \"react\";\r\nimport \"../styles/DataTable.css\";\r\nimport Cell from \"./Cell\";\r\n\r\nclass Row extends React.Component {\r\n  render() {\r\n    const rowData = this.props.rowData;\r\n    return (\r\n      <tr\r\n        key={this.props.rowNumber}\r\n        id={`${rowData.cityGeoNameId}`}\r\n        className=\"table-row\"\r\n      >\r\n        <Cell\r\n          classProp=\"city-entry\"\r\n          data={rowData.city}\r\n          rowNumber={this.props.rowNumber}\r\n        />\r\n        <Cell\r\n          classProp=\"country-entry\"\r\n          data={rowData.country}\r\n          rowNumber={this.props.rowNumber}\r\n        />\r\n        <Cell\r\n          classProp=\"continent-entry\"\r\n          data={rowData.continent}\r\n          rowNumber={this.props.rowNumber}\r\n        />\r\n        <Cell\r\n          classProp=\"date-entry\"\r\n          data={rowData.date}\r\n          rowNumber={this.props.rowNumber}\r\n        />\r\n        <Cell\r\n          classProp=\"time-entry\"\r\n          data={rowData.time}\r\n          rowNumber={this.props.rowNumber}\r\n        />\r\n        <Cell\r\n          classProp=\"temp-entry\"\r\n          data={`${rowData.temp} \\u2103`}\r\n          rowNumber={this.props.rowNumber}\r\n        />\r\n        <Cell\r\n          classProp=\"weather-entry\"\r\n          data={rowData.weather}\r\n          rowNumber={this.props.rowNumber}\r\n        />\r\n        <Cell\r\n          classProp=\"humidity-entry\"\r\n          data={`${rowData.humidity}%`}\r\n          rowNumber={this.props.rowNumber}\r\n        />\r\n        <Cell\r\n          classProp=\"windspeed-entry\"\r\n          data={`${rowData.windspeed} km/h`}\r\n          rowNumber={this.props.rowNumber}\r\n        />\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Row;\r\n","import React from \"react\";\r\nimport \"../styles/DataTable.css\";\r\nimport Row from \"../components/Row\";\r\n\r\nconst DataTable = ({ geoData }) => {\r\n  const cityRows = Object.entries(geoData).map(([key, value], i) => {\r\n    return <Row rowData={value} rowNumber={i} key={`${value.city}-${value.country}`}/>;\r\n  });\r\n  return (\r\n    <article className=\"data-container\">\r\n      <table className=\"data-table\">\r\n        <thead className=\"table-header\">\r\n          <tr>\r\n            <th className=\"city-header\">City</th>\r\n            <th className=\"country-header\">Country</th>\r\n            <th className=\"continent-header\">Continent</th>\r\n            <th className=\"date-header\">Date</th>\r\n            <th className=\"time-header\">Time</th>\r\n            <th className=\"temp-header\">Temp</th>\r\n            <th className=\"weather-header\">Weather</th>\r\n            <th className=\"humidity-header\">Humidity</th>\r\n            <th className=\"windspeed-header\">Windspeed</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{cityRows}</tbody>\r\n      </table>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default DataTable;\r\n","import React from \"react\";\r\nimport \"../styles/SearchBox.css\";\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n  return (\r\n    <section role=\"search\">\r\n      <form>\r\n        <fieldset>\r\n          <label htmlFor=\"searchbox\">\r\n            <input\r\n              type=\"search\"\r\n              name=\"searchbox\"\r\n              id=\"searchbox\"\r\n              className=\"searchbox\"\r\n              placeholder=\"Search for any variable\"\r\n              maxLength={150}\r\n              onChange={searchChange}\r\n            />\r\n          </label>\r\n        </fieldset>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\nimport \"../styles/SortBox.css\";\r\n\r\nconst SortBox = ({ sortField, sortChange }) => {\r\n    return (\r\n        <section>\r\n            <form>\r\n                <fieldset>\r\n                    <label htmlFor=\"sortbox\">\r\n                        <select name=\"sortbox\" id=\"sortbox\" className=\"sortbox\"\r\n                            type=\"select\"\r\n                            onChange={sortChange}\r\n                        >\r\n                            <option value=\"city\">City name</option>\r\n                            <option value=\"continent\">Continent</option>\r\n                            <option value=\"temp\">Temperature</option>\r\n                            <option value=\"windspeed\">Windspeed</option>\r\n                            <option value=\"humidity\">Humidity</option>\r\n                            <option value=\"weather\">Weather</option>\r\n                            <option value=\"date\">Date</option>\r\n                            <option value=\"time\">Time</option>\r\n                        </select>\r\n                    </label>\r\n                </fieldset>\r\n            </form>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default SortBox","import React, { Component } from \"react\";\r\nimport \"../styles/App.css\";\r\nimport \"../styles/DataTable.css\";\r\nimport Header from \"../components/Header\";\r\nimport Footer from \"../components/Footer\";\r\nimport DataTable from \"../components/DataTable\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport SortBox from \"../components/SortBox\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      cities: [{city: \"Kabul\"}],\r\n      searchfield: \"\",\r\n      sortfield: \"city\"\r\n    };\r\n  }\r\n\r\n  // Import list of countries and city names\r\n  componentDidMount() {\r\n    // Async API call returning object with country data\r\n    (async () => {\r\n      // return only capitals of world cities\r\n      const cityWhere = encodeURIComponent(\r\n        JSON.stringify({\r\n          isCapital: true,\r\n        })\r\n      );\r\n\r\n      // Fetch list of capital cities\r\n      const cityResponse = await fetch(\r\n        `https://parseapi.back4app.com/classes/Continentscountriescities_City?limit=10&include=country,country.continent&keys=name,country,country.name,country.capital,country.continent,country.continent.name,population,location,cityId,adminCode&where=${cityWhere}`,\r\n        {\r\n          headers: {\r\n            \"X-Parse-Application-Id\":\r\n              \"KFsBDbVFGZ9WYkvFSkoyRJoFU4ORIL1sv563IDSU\", // This is your app's application id\r\n            \"X-Parse-REST-API-Key\": \"d6cXuIVw0c1O2nqLfsdFyaLrMnEJ4XFE3E2GK7x0\", // This is your app's REST API key\r\n          },\r\n        }\r\n      );\r\n\r\n      const cityResults = await cityResponse.json(); // Here you have the data that you need\r\n      const cityData = cityResults.results;\r\n      // console.log(JSON.stringify(cityData, null, 2));\r\n\r\n      const cleanCityData = Object.entries(cityData).map(([key, value]) => {\r\n        return {\r\n          city: value.name,\r\n          cityGeoNameId: value.cityId,\r\n          country: value.country.name,\r\n          countryGeoNameId: value.country.objectId,\r\n          continent: value.country.continent.name,\r\n          latitude: value.location.latitude,\r\n          longitude: value.location.longitude,\r\n          timezone: \"\",\r\n          time: \"\",\r\n          date: \"\",\r\n          temp: undefined,\r\n          weather: \"\",\r\n          humidity: undefined,\r\n          windspeed: undefined,\r\n        };\r\n      });\r\n\r\n      await this.setState({\r\n        cities: cleanCityData,\r\n      });\r\n\r\n      for (let city of cleanCityData) {\r\n        const weatherResponse = await fetch(\r\n          `http://api.openweathermap.org/data/2.5/weather?lat=${city.latitude}&lon=${city.longitude}&appid=13ee2a5d09316b306b5e506d3ff09c42&units=metric`\r\n        );\r\n        const weatherData = await weatherResponse.json();\r\n        const timezoneResponse = await fetch(\r\n          `http://api.geonames.org/timezoneJSON?lat=${city.latitude}&lng=${city.longitude}&username=abdev`\r\n        );\r\n        const timezoneData = await timezoneResponse.json();\r\n\r\n        // console.log(weatherData);\r\n\r\n        city.timezone = timezoneData.timezoneId;\r\n        city.time = timezoneData.time.slice(11);\r\n        city.date = timezoneData.time.slice(5,10);\r\n        await this.setState({\r\n          cities: cleanCityData,\r\n        });\r\n        city.temp = weatherData.main.temp;\r\n        await this.setState({\r\n          cities: cleanCityData,\r\n        });\r\n        city.weather = weatherData.weather[0].main;\r\n        await this.setState({\r\n          cities: cleanCityData,\r\n        });\r\n        city.humidity = weatherData.main.humidity;\r\n        await this.setState({\r\n          cities: cleanCityData,\r\n        });\r\n        city.windspeed = weatherData.wind.speed;\r\n        await this.setState({\r\n          cities: cleanCityData,\r\n        });\r\n      }\r\n\r\n      // console.log(cleanCityData);\r\n\r\n      await this.setState({\r\n        cities: cleanCityData,\r\n      });\r\n      \r\n      // console.log(typeof(cleanCityData[0].temp));\r\n    })();\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value });\r\n  }\r\n\r\n  onSortChange = (event) => {\r\n    this.setState({ sortfield: event.target.value });\r\n  }\r\n\r\n  render() {\r\n    const searchedCities = this.state.cities.filter((city) => {\r\n        if (city.city !== undefined) {\r\n          return ( \r\n            city.city.toLowerCase().includes(this.state.searchfield.toLowerCase()) ||\r\n            city.country.toLowerCase().includes(this.state.searchfield.toLowerCase()) ||          \r\n            city.continent.toLowerCase().includes(this.state.searchfield.toLowerCase()) ||\r\n            city.weather.toLowerCase().includes(this.state.searchfield.toLowerCase()) ||\r\n            city.time.includes(this.state.searchfield) ||\r\n            city.date.includes(this.state.searchfield) ||\r\n            (city.temp).toString().includes(this.state.searchfield) ||\r\n            (city.humidity).toString().includes(this.state.searchfield) ||\r\n            (city.windspeed).toString().includes(this.state.searchfield)\r\n          )\r\n        } else {\r\n          return (city)\r\n        }\r\n    });\r\n\r\n    const sortArray = (arr, type) => {\r\n      const types = {\r\n          city: \"city\",\r\n          country: \"country\",\r\n          continent: \"continent\",\r\n          latitude: \"latitude\",\r\n          longitude: \"longitude\",\r\n          timezone: \"timezone\",\r\n          time: \"time\",\r\n          date: \"date\",\r\n          temp: \"temp\",\r\n          weather: \"weather\",\r\n          humidity: \"humidity\",\r\n          windspeed: \"windspeed\",\r\n      };\r\n\r\n      const sortProperty = types[type];\r\n      const sorted = arr.sort((a, b) => {\r\n          if (a[sortProperty] < b[sortProperty]) {\r\n            return -1;\r\n          }\r\n          if (a[sortProperty] > b[sortProperty]) {\r\n            return 1;\r\n          } else {\r\n            return 0;\r\n          }\r\n\r\n      }\r\n      );\r\n      return (sorted);\r\n    };\r\n\r\n    \r\n    const sortedCities = sortArray(searchedCities, this.state.sortfield);\r\n    // console.log(sortedCities);\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <main className=\"main-container\">\r\n          <section className=\"filter-sort\" id=\"main-filter-sort\">\r\n            <SortBox sortChange={this.onSortChange} />\r\n            <SearchBox searchChange={this.onSearchChange} />\r\n          </section>\r\n          <DataTable geoData={sortedCities} />\r\n        </main>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./styles/DataTable.css\";\r\nimport \"./index.css\";\r\nimport App from \"./containers/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}